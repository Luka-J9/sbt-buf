// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.example.petstore.generated.petstore


object PetStoreServiceGrpc {
  val METHOD_PET_BY_ID: _root_.io.grpc.MethodDescriptor[com.example.petstore.generated.petstore.PetByIdRequest, com.example.petstore.generated.petstore.PetByIdResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("petstore.v1.PetStoreService", "PetById"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.PetByIdRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.PetByIdResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.example.petstore.generated.petstore.PetstoreProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_USER_BY_NAME: _root_.io.grpc.MethodDescriptor[com.example.petstore.generated.petstore.UserByNameRequest, com.example.petstore.generated.petstore.UserByNameResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("petstore.v1.PetStoreService", "UserByName"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.UserByNameRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.UserByNameResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.example.petstore.generated.petstore.PetstoreProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_LIST_USERS: _root_.io.grpc.MethodDescriptor[com.example.petstore.generated.petstore.ListUsersRequest, com.example.petstore.generated.petstore.User] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("petstore.v1.PetStoreService", "ListUsers"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.ListUsersRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.User])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.example.petstore.generated.petstore.PetstoreProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_STORE_USERS: _root_.io.grpc.MethodDescriptor[com.example.petstore.generated.petstore.User, com.example.petstore.generated.petstore.StoreUsersResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.CLIENT_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("petstore.v1.PetStoreService", "StoreUsers"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.User])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.StoreUsersResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.example.petstore.generated.petstore.PetstoreProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_BULK_USERS: _root_.io.grpc.MethodDescriptor[com.example.petstore.generated.petstore.User, com.example.petstore.generated.petstore.User] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("petstore.v1.PetStoreService", "BulkUsers"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.User])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.example.petstore.generated.petstore.User])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.example.petstore.generated.petstore.PetstoreProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("petstore.v1.PetStoreService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(com.example.petstore.generated.petstore.PetstoreProto.javaDescriptor))
      .addMethod(METHOD_PET_BY_ID)
      .addMethod(METHOD_USER_BY_NAME)
      .addMethod(METHOD_LIST_USERS)
      .addMethod(METHOD_STORE_USERS)
      .addMethod(METHOD_BULK_USERS)
      .build()
  
  trait PetStoreService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = PetStoreService
    def petById(request: com.example.petstore.generated.petstore.PetByIdRequest): scala.concurrent.Future[com.example.petstore.generated.petstore.PetByIdResponse]
    def userByName(request: com.example.petstore.generated.petstore.UserByNameRequest): scala.concurrent.Future[com.example.petstore.generated.petstore.UserByNameResponse]
    def listUsers(request: com.example.petstore.generated.petstore.ListUsersRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User]): _root_.scala.Unit
    def storeUsers(responseObserver: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.StoreUsersResponse]): _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User]
    def bulkUsers(responseObserver: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User]): _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User]
  }
  
  object PetStoreService extends _root_.scalapb.grpc.ServiceCompanion[PetStoreService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[PetStoreService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.example.petstore.generated.petstore.PetstoreProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = com.example.petstore.generated.petstore.PetstoreProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: PetStoreService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_PET_BY_ID,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: com.example.petstore.generated.petstore.PetByIdRequest, observer: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.PetByIdResponse]) => {
          serviceImpl.petById(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_USER_BY_NAME,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: com.example.petstore.generated.petstore.UserByNameRequest, observer: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.UserByNameResponse]) => {
          serviceImpl.userByName(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_LIST_USERS,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall((request: com.example.petstore.generated.petstore.ListUsersRequest, observer: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User]) => {
          serviceImpl.listUsers(request, observer)
        }))
      .addMethod(
        METHOD_STORE_USERS,
        _root_.io.grpc.stub.ServerCalls.asyncClientStreamingCall((observer: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.StoreUsersResponse]) => {
          serviceImpl.storeUsers(observer)
        }))
      .addMethod(
        METHOD_BULK_USERS,
        _root_.io.grpc.stub.ServerCalls.asyncBidiStreamingCall((observer: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User]) => {
          serviceImpl.bulkUsers(observer)
        }))
      .build()
  }
  
  trait PetStoreServiceBlockingClient {
    def serviceCompanion = PetStoreService
    def petById(request: com.example.petstore.generated.petstore.PetByIdRequest): com.example.petstore.generated.petstore.PetByIdResponse
    def userByName(request: com.example.petstore.generated.petstore.UserByNameRequest): com.example.petstore.generated.petstore.UserByNameResponse
    def listUsers(request: com.example.petstore.generated.petstore.ListUsersRequest): scala.collection.Iterator[com.example.petstore.generated.petstore.User]
  }
  
  class PetStoreServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[PetStoreServiceBlockingStub](channel, options) with PetStoreServiceBlockingClient {
    override def petById(request: com.example.petstore.generated.petstore.PetByIdRequest): com.example.petstore.generated.petstore.PetByIdResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PET_BY_ID, options, request)
    }
    
    override def userByName(request: com.example.petstore.generated.petstore.UserByNameRequest): com.example.petstore.generated.petstore.UserByNameResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_USER_BY_NAME, options, request)
    }
    
    override def listUsers(request: com.example.petstore.generated.petstore.ListUsersRequest): scala.collection.Iterator[com.example.petstore.generated.petstore.User] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_LIST_USERS, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PetStoreServiceBlockingStub = new PetStoreServiceBlockingStub(channel, options)
  }
  
  class PetStoreServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[PetStoreServiceStub](channel, options) with PetStoreService {
    override def petById(request: com.example.petstore.generated.petstore.PetByIdRequest): scala.concurrent.Future[com.example.petstore.generated.petstore.PetByIdResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PET_BY_ID, options, request)
    }
    
    override def userByName(request: com.example.petstore.generated.petstore.UserByNameRequest): scala.concurrent.Future[com.example.petstore.generated.petstore.UserByNameResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_USER_BY_NAME, options, request)
    }
    
    override def listUsers(request: com.example.petstore.generated.petstore.ListUsersRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_LIST_USERS, options, request, responseObserver)
    }
    
    override def storeUsers(responseObserver: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.StoreUsersResponse]): _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User] = {
      _root_.scalapb.grpc.ClientCalls.asyncClientStreamingCall(channel, METHOD_STORE_USERS, options, responseObserver)
    }
    
    override def bulkUsers(responseObserver: _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User]): _root_.io.grpc.stub.StreamObserver[com.example.petstore.generated.petstore.User] = {
      _root_.scalapb.grpc.ClientCalls.asyncBidiStreamingCall(channel, METHOD_BULK_USERS, options, responseObserver)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PetStoreServiceStub = new PetStoreServiceStub(channel, options)
  }
  
  object PetStoreServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[PetStoreServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PetStoreServiceStub = new PetStoreServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[PetStoreServiceStub] = this
  }
  
  def bindService(serviceImpl: PetStoreService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = PetStoreService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): PetStoreServiceBlockingStub = new PetStoreServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): PetStoreServiceStub = new PetStoreServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.example.petstore.generated.petstore.PetstoreProto.javaDescriptor.getServices().get(0)
  
}